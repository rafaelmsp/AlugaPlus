{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.storageKey = 'alugaplus_auth';\n      this._user$ = new BehaviorSubject(this.readStorage());\n      this.user$ = this._user$.asObservable();\n    }\n    login(credentials) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, credentials).pipe(tap(res => this.persistUser(res)));\n    }\n    register(payload) {\n      return this.http.post(`${environment.apiUrl}/auth/register`, payload).pipe(tap(res => this.persistUser(res)));\n    }\n    logout() {\n      localStorage.removeItem(this.storageKey);\n      this._user$.next(null);\n    }\n    getToken() {\n      return this.readStorage()?.token ?? null;\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    getCurrentUser() {\n      return this.readStorage();\n    }\n    persistUser(response) {\n      const user = {\n        nome: response.nome,\n        email: response.email,\n        role: response.role,\n        token: response.token\n      };\n      localStorage.setItem(this.storageKey, JSON.stringify(user));\n      this._user$.next(user);\n    }\n    readStorage() {\n      const raw = localStorage.getItem(this.storageKey);\n      if (!raw) {\n        return null;\n      }\n      try {\n        return JSON.parse(raw);\n      } catch {\n        return null;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}