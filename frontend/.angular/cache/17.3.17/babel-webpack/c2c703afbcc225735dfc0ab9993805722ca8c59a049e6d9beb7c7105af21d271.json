{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor() {\n      this.http = inject(HttpClient);\n    }\n    get(endpoint, params) {\n      return this.http.get(this.buildUrl(endpoint), {\n        params: this.buildParams(params)\n      });\n    }\n    post(endpoint, body) {\n      return this.http.post(this.buildUrl(endpoint), body);\n    }\n    put(endpoint, body) {\n      return this.http.put(this.buildUrl(endpoint), body);\n    }\n    patch(endpoint, body) {\n      return this.http.patch(this.buildUrl(endpoint), body);\n    }\n    delete(endpoint) {\n      return this.http.delete(this.buildUrl(endpoint));\n    }\n    upload(endpoint, formData) {\n      return this.http.post(this.buildUrl(endpoint), formData);\n    }\n    download(endpoint) {\n      return this.http.get(this.buildUrl(endpoint), {\n        responseType: 'blob'\n      });\n    }\n    buildUrl(endpoint) {\n      return `${environment.apiUrl}${endpoint}`;\n    }\n    buildParams(params) {\n      if (!params) {\n        return undefined;\n      }\n      let httpParams = new HttpParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          httpParams = httpParams.set(key, value.toString());\n        }\n      });\n      return httpParams;\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}